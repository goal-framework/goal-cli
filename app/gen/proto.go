package gen

import (
	"fmt"
	"github.com/emicklei/proto"
	"log"
	"os"
	"path/filepath"
	"runtime"
	"time"
)

// 自定义头部注释

func Pro(protoFile, tmplFile, outputDir string) {
	var headerComment = fmt.Sprintf(`// Code generated by goal-cli. DO NOT EDIT.
// versions:
// 	goal-cli v0.5.19
// 	go       %s
//
// updated_at: %s
// source: %s
`, runtime.Version(), time.Now().Format("2006-01-02 15:04:05"), protoFile)

	// 确保 outputDir 是绝对路径
	outputDirAbs, err := filepath.Abs(outputDir)
	if err != nil {
		log.Fatal(err)
	}

	// 读取模块名和模块根目录
	moduleName, _, err := GetModuleNameAndDir(outputDirAbs)
	if err != nil {
		log.Fatalf("无法读取模块名：%v", err)
	}
	fmt.Printf("读取到的模块名：%s\n", moduleName)

	// 初始化模板，并添加函数映射
	tmpl := GetTemplate(tmplFile)

	definition := ParseProto(protoFile)
	basePackage := filepath.Join(moduleName, outputDir)
	pwd, err := os.Getwd()
	if err != nil {
		log.Fatalf("无法读取当前目录：%v", err)
	}
	// 提取数据
	data := ExtractProto(pwd, definition, basePackage, filepath.Dir(protoFile))

	// 更新输出目录

	var files []string

	for _, messages := range data.Messages {
		files = append(files, GenMessages(tmpl, outputDirAbs, messages)...)
	}

	// 生成服务代码
	for _, service := range data.Services {
		files = append(files, GenServices(outputDirAbs, basePackage, tmpl, service.List)...)

		GenRouters(outputDirAbs, service.List)
	}

	files = append(files, GenEnums(outputDirAbs, tmpl, data.Enums)...)

	// 调用 AddHeaderAndFormatFiles 函数，传入文件列表和注释内容
	err = AddHeaderAndFormatFiles(files, headerComment)
	if err != nil {
		fmt.Printf("Error processing files: %v\n", err)
	}

	fmt.Println("代码生成完成。")
}

func ParseProto(protoFile string) *proto.Proto {
	// 读取 proto 文件
	protoFilePath, err := filepath.Abs(protoFile)
	if err != nil {
		log.Fatal(err)
	}

	// 解析 proto 文件
	reader, err := os.Open(protoFilePath)
	if err != nil {
		log.Fatal(err)
	}
	defer reader.Close()

	parser := proto.NewParser(reader)
	definition, err := parser.Parse()
	if err != nil {
		log.Fatal(err)
	}
	definition.Filename = protoFile
	return definition
}
