{{- define "model" -}}
package {{ .Package }}
  
import (
    "encoding/json"
	"github.com/goal-web/supports/logs"
  "github.com/goal-web/contracts"
  "github.com/goal-web/database/table"
  "github.com/goal-web/supports/utils"
  {{- if .Model.Authenticatable }}
  "fmt"
  {{- end }}
  {{- if hasMsgComment .Model "@carbon" }}
	"github.com/golang-module/carbon/v2"
  {{- end }}

  {{- range .Imports }}
{{ .Alias }} "{{ .Pkg }}"
{{- end }}
)

{{- $modelName := .Model.Name }}
{{- $tableName := .Model.TableName }}
{{- $primaryKey := .Model.PrimaryKey }}

func New{{ $modelName }}(fields contracts.Fields) *{{ $modelName }} {
  var model {{ $modelName }}
  model.Set(fields)
  return &model
}

func {{ .Model.RawName }}Query() *table.Table[{{ $modelName }}] {
  return table.NewQuery("{{ $tableName }}", New{{ $modelName }}).SetPrimaryKey("{{ $primaryKey }}")
}

{{ toComments .Model.Name .Model.Comments }}
type {{ $modelName }} struct {
  {{- range .Fields }}
  {{ .Comments }}
  {{ .Name }} {{ goType . }} `{{ toTags . }}`
  {{- end }}

  _update contracts.Fields
  _relations contracts.Fields
}

func (model *{{ $modelName }}) Exists() bool {
  return {{ .Model.RawName }}Query().Where("{{ $primaryKey }}", model.GetPrimaryKey()).Count() > 0
}

func (model *{{ $modelName }}) Save() contracts.Exception {
  if model._update == nil {
    return nil
  }
  if {{ $modelName }}Saving != nil {
    if err := {{ $modelName }}Saving(model); err != nil {
      return err
    }
  }
  _, err := {{ .Model.RawName }}Query().Where("{{ $primaryKey }}", model.GetPrimaryKey()).UpdateE(model._update)
  if err == nil {
    model._update = nil
    if {{ $modelName }}Saved != nil {
      {{ $modelName }}Saved(model)
    }
  }

  return err
}

func (model *{{ $modelName }}) Set(fields contracts.Fields) {
  for key, value := range fields {
  {{- range .Fields }}
    if key == "{{ .JSONName }}" {
      switch v := value.(type) {
      case {{ goType . }}:
        model.Set{{ .Name }}(v)
      case func() {{ goType . }}:
        model.Set{{ .Name }}(v())
        {{- $type := goType . }}
        {{- if ne $type "string"}}
      case string:
        {{- if eq $type "[]byte" }}
        model.Set{{ .Name }}([]byte(v))
        {{else}}
        var vd {{ goType . }}
        err := json.Unmarshal([]byte(v), &vd)
        if err != nil {
            logs.Default().Warn("Failed to Parse field "+key)
            continue
        }
        model.Set{{ .Name }}(vd)
        {{end}}
        {{end}}
        {{- if ne $type "[]byte"}}
      case []byte:
        {{- if eq $type "string" }}
        model.Set{{ .Name }}(string(v))
        {{else}}
        var vd {{ goType . }}
        err := json.Unmarshal(v, &vd)
        if err != nil {
            logs.Default().Warn("Failed to Parse field "+key)
            continue
        }
        model.Set{{ .Name }}(vd)
        {{end}}
        {{end}}
      }
    }
  {{- end }}
  }
}

func (model *{{ $modelName }}) Only(key ...string) contracts.Fields {
  var fields = make(contracts.Fields)
  for _, k := range key {
  {{- range .Fields }}
    if k == "{{ .JSONName }}" {
      fields[k] = model.Get{{ .Name }}()
      continue
    }
  {{- end }}

    if {{ $modelName }}Appends[k] != nil {
     fields[k] = {{ $modelName }}Appends[k](model)
    }
  }
  return fields
}

func (model *{{ $modelName }}) Except(keys ...string) contracts.Fields {
  var excepts = map[string]struct{}{}
  for _, k := range keys {
    excepts[k] = struct{}{}
  }
  var fields = make(contracts.Fields)
  for key, value := range model.ToFields() {
    if _, ok := excepts[key]; ok {
      continue
    }
    fields[key] = value
  }
  return fields
}


var {{ $modelName }}Appends = map[string]func(model *{{ $modelName }}) any{}

func (model *{{ $modelName }}) ToFields() contracts.Fields {
  fields := contracts.Fields{
  {{- range .Fields }}
    "{{ .JSONName }}": model.Get{{ .Name }}(),
  {{- end }}
  }

  for key, f := range {{ $modelName }}Appends {
    fields[key] = f(model)
  }


  return fields
}

func (model *{{ $modelName }}) Update(fields contracts.Fields) contracts.Exception {

  if {{ $modelName }}Updating != nil {
    if err := {{ $modelName }}Updating(model, fields); err != nil {
      return err
    }
  }

  if model._update != nil {
    utils.MergeFields(model._update, fields)
  }


  _, err := {{ .Model.RawName }}Query().Where("{{ $primaryKey }}", model.GetPrimaryKey()).UpdateE(fields)

  if err == nil {
    model.Set(fields)
    model._update = nil
    if {{ $modelName }}Updated != nil {
      {{ $modelName }}Updated(model, fields)
    }
  }

  return err
}

func (model *{{ $modelName }}) Refresh() contracts.Exception {
  fields, err := table.ArrayQuery("{{ $tableName }}").Where("{{ $primaryKey }}", model.GetPrimaryKey()).FirstE()
  if err != nil {
    return err
  }

  model.Set(*fields)
  return nil
}

func (model *{{ $modelName }}) Delete() contracts.Exception {

  if {{ $modelName }}Deleting != nil {
    if err := {{ $modelName }}Deleting(model); err != nil {
      return err
    }
  }

  _, err := {{ .Model.RawName }}Query().Where("{{ $primaryKey }}", model.GetPrimaryKey()).DeleteE()
  if err == nil && {{ $modelName }}Deleted != nil {
    {{ $modelName }}Deleted(model)
  }

  return err
}

var (
  {{- range .Fields }}
  {{ $modelName }}{{ .Name }}Getter func(model *{{ $modelName }}, raw {{ goType . }}) {{ goType . }}
  {{ $modelName }}{{ .Name }}Setter func(model *{{ $modelName }}, raw {{ goType . }}) {{ goType . }}
  {{- end }}
  {{ $modelName }}Saving   func(model *{{ $modelName }}) contracts.Exception
  {{ $modelName }}Saved    func(model *{{ $modelName }})
  {{ $modelName }}Updating func(model *{{ $modelName }}, fields contracts.Fields) contracts.Exception
  {{ $modelName }}Updated  func(model *{{ $modelName }}, fields contracts.Fields)
  {{ $modelName }}Deleting func(model *{{ $modelName }}) contracts.Exception
  {{ $modelName }}Deleted  func(model *{{ $modelName }})
  {{ $modelName }}PrimaryKeyGetter func(model *{{ $modelName }}) any
)


func (model *{{ $modelName }}) GetPrimaryKey() any {
  if {{ $modelName }}PrimaryKeyGetter != nil {
    return {{ $modelName }}PrimaryKeyGetter(model)
  }

  return model.{{ toCamelCase $primaryKey }}
}

{{- if .Model.Authenticatable }}
func (model *{{ $modelName }}) GetAuthenticatableKey() string {
  return fmt.Sprintf("%v", model.GetPrimaryKey())
}

func {{ .Model.RawName }}AuthProvider(identify string) contracts.Authenticatable {
  return {{ .Model.RawName }}Query().Find(identify)
}

{{- end }}


{{- range .Fields }}

func (model *{{ $modelName }}) Get{{ .Name }}() {{ goType . }} {
  if {{ $modelName }}{{ .Name }}Getter != nil {
    return {{ $modelName }}{{ .Name }}Getter(model, model.{{ .Name }})
  }
  return model.{{ .Name }}
}

func (model *{{ $modelName }}) Set{{ .Name }}(value {{ goType . }}) {
  if {{ $modelName }}{{ .Name }}Setter != nil {
    value = {{ $modelName }}{{ .Name }}Setter(model, value)
  }

  if model._update == nil {
    model._update = contracts.Fields{"{{ .JSONName }}": value}
  } else {
    model._update["{{ .JSONName }}"] = value
  }
  model.{{ .Name }} = value
}

{{- if hasComment .Comment "@carbon" }}

func (model *{{ $modelName }}) Get{{ .Name }}Carbon() carbon.Carbon {
  return carbon.Parse(model.Get{{ .Name }}())
}

{{- end }}

{{- end }}

{{ end }}


{{- define "data" -}}
package {{ .Package }}
  
import (
{{- range .Imports }}
{{ .Alias }} "{{ .Pkg }}"
{{- end }}
)

type {{ .Model.Name }} struct {
  {{- range .Fields }}
  {{ .Name }} {{ goType . }} `{{ toTags . }}`
  {{- end }}
}

{{ end }}

{{- define "request" -}}
package {{ .Package }}
  
import (
  {{- range .Imports }}
  {{ .Alias }} "{{ .Pkg }}"
  {{- end }}
  "github.com/goal-web/contracts"
)

type {{ .Model.Name }} struct {
  {{- range .Fields }}
  {{ .Name }} {{ goType . }} `{{ toTags . }}`
  {{- end }}
}

func (model *{{ .Model.Name }}) ToFields() contracts.Fields {
  return contracts.Fields{
  {{- range .Fields }}
    "{{ .JSONName }}": model.{{ .Name }},
  {{- end }}
  }
}

{{ end }}

{{- define "result" -}}
package {{ .Package }}
    
import (
  {{- range .Imports }}
  {{ .Alias }} "{{ .Pkg }}"
  {{- end }}
)

type {{ .Model.Name }} struct {
  {{- range .Fields }}
  {{ .Name }} {{ goType . }} `{{ toTags . }}`
  {{- end }}
}

{{ end }}

{{- define "enum" -}}
package {{ .Package }}

{{- $enumName := .Name }}
type {{ .Name }} int
const (
  {{- range .Values }}
  {{- $FieldName := sprintf "%s%s" $enumName .Name }}

  {{ toComments $FieldName .Comments }}
  {{ $enumName }}{{ .Name }} {{ $enumName }} = {{ .Value }}
  {{- end }}
  {{ $enumName }}Unknown {{ $enumName }} = -1000
      
)
  
  
func (item {{ $enumName }}) String() string {
    switch item {
      {{- range .Values }}
        case {{ $enumName }}{{ .Name }}:
          return "{{ .Name }}"
      {{- end }}
        default:
          return "Unknown"
  }
}

func (item {{ $enumName }}) Message() string {
    switch item {
      {{- range .Values }}
        case {{ $enumName }}{{ .Name }}:
          return "{{ .Message }}"
      {{- end }}
        default:
          return "Unknown"
  }
}

func Parse{{ $enumName }}FromString(msg string) {{ $enumName }} {
    switch msg {
    {{- range .Values }}
        case "{{ .Name }}":
          return {{ $enumName }}{{ .Name }}
    {{- end }}
        default:
          return {{ $enumName }}Unknown
  }
}


{{ end }}



{{- define "service" -}}
package {{ .Package }}

import (
  {{- range .Imports }}
  {{ .Alias }} "{{ .Pkg }}"
  {{- end }}
)

{{- $serviceName := .Name }}

{{- range .Methods }}

var {{ $serviceName }}{{ .Name }}Handler func (req *{{ .InputUsageName }}) (*{{ .OutputUsageName }}, error)
func {{ $serviceName }}{{ .Name }}(req *{{ .InputUsageName }}) (*{{ .OutputUsageName }}, error) {
  if {{ $serviceName }}{{ .Name }}Handler != nil {
    return {{ $serviceName }}{{ .Name }}Handler(req)
  }
  return nil, nil
}
{{- end }}
{{ end }}

{{- define "controller" -}}
package {{ .Package }}

import (
  "github.com/goal-web/contracts"
  "github.com/goal-web/validation"
  "{{ .ResponsePath }}"
  svc "{{ .ImportPath }}"
  {{- range .Imports }}
  {{- if notContains .Pkg "results" }}
  {{ .Alias }} "{{ .Pkg }}"
  {{ end -}}
  {{- end }}
)

{{- $serviceName := .Name }}
{{- $prefix := .Prefix }}
func {{ .Name }}Router(router contracts.HttpRouter) {
  routeGroup := router.Group("{{ $prefix }}"{{ toMiddlewares .Middlewares }})
  {{- range .Methods }}
  {{- $controllerMethod := sprintf "%s%s" $serviceName .Name  }}
  {{- $path := .Path  }}
  {{- $middlewares := .Middlewares }}
    {{- range .Method }}
    routeGroup.{{ . }}("{{ $path }}", {{ $controllerMethod }}{{ toMiddlewares $middlewares }})
    {{- end }}
  {{- end }}
}


{{- $usageName := .UsageName }}

{{- range .Methods }}
func {{ $serviceName }}{{ .Name }}(request contracts.HttpRequest) any {
    var req {{ .InputUsageName }}
    
    if err:= request.Parse(&req); err != nil {
      return response.ParseReqErr(err)
    }
    
    if err := validation.Struct(req); err != nil {
      return response.InvalidReq(err)
    }
  
    resp, err := {{ $usageName }}{{ .Name }}(&req)
    if err != nil {
      return response.BizErr(err)
    }
    
    return response.Success(resp)
}
{{- end }}
{{ end }}